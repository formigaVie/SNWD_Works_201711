16.12.2017:
Codecademy list and dictionaries:

prices = {"banana": 4, "apple":2, "orange":1.5, "pear":3}
stock = {"banana":6, "apple":0, "orange":32, "pear":15}

for key in prices:
  print key
  print "price: %s" % prices[key]
  print "stock: %s" % stock[key]

9.
prices = {
  "banana" : 4,
  "apple"  : 2,
  "orange" : 1.5,
  "pear"   : 3,
}
stock = {
  "banana" : 6,
  "apple"  : 0,
  "orange" : 32,
  "pear"   : 15,
}

total = 0

for key in prices:
  print key
  print "price: %s" % prices[key]
  print "stock: %s" % stock[key]
  
for euro in prices:
  total += prices[euro] * stock[euro]
  
print total

11
shopping_list = ["banana", "orange", "apple"]

stock = {
  "banana": 6,
  "apple": 0,
  "orange": 32,
  "pear": 15
}
    
prices = {
  "banana": 4,
  "apple": 2,
  "orange": 1.5,
  "pear": 3
}

# Write your code below!
def compute_bill(food):
  total = 0
  for item in food:
    total = total + prices[item]
  return total

Erweiterung:
def compute_bill(food):
  total = 0
  for item in food:
    if item in stock > 0:
    	total = total + prices[item]
			stock[item] = stock[item] - 1
  return total

Student becomes teacher:
lloyd = {
  "name": "Lloyd",
  "homework": [90.0, 97.0, 75.0,92.0],
  "quizzes": [88.0, 40.0,94.0],
  "tests": [75.0,90.0]
}
alice = {
  "name": "Alice",
  "homework": [100.0, 92.0, 98.0, 100.0],
  "quizzes": [82.0, 83.0, 91.0],
  "tests": [89.0, 97.0]
}
tyler = {
  "name": "Tyler",
  "homework": [0.0, 87.0, 75.0, 22.0],
  "quizzes": [0.0, 75.0, 78.0],
  "tests": [100.0, 100.0]
}
students = [lloyd,alice,tyler]

for student in students:
  print student["name"]
  print student["homework"]
  print student["quizzes"]
  print student["tests"]

def average(numbers):
  total = sum(numbers)
  total = float(total)
  total = total / len(numbers)
  return total

def average(numbers):
  total = sum(numbers)
  total = float(total)
  total = total / len(numbers)
  return total

def get_average(student):
  homework = average(student["homework"])
  quizzes = average(student["quizzes"])
  tests = average(student["tests"])
  
  return 0.1 * homework + 0.3 * quizzes + 0.6 * tests


def get_letter_grade(score):
  if score >= 90:
    return "A"
  elif score >= 80:
    return "B"
  elif score >= 70:
    return "C"
  elif score >= 60:
    return "D"
  else:
    return "F"

print get_letter_grade(get_average(lloyd))


def get_class_average(class_list):
  results = []
  for student in class_list:
    AVG = get_average(student)
    results.append(AVG)
  return average(results)

students = [lloyd, alice, tyler]
class_avg = get_class_average(students)
print class_avg
print get_letter_grade(class_avg)

Lists and functions:
2:
n = [1, 3, 5]
# Do your multiplication here
n[1] = n[1]*5
print n
3:
n = [1, 3, 5]
# Append the number 4 here
n.append(4)
print n
4:
n.pop(index) will remove the item at index from the list and return it to you:

n = [1, 3, 5]
n.pop(1)
# Returns 3 (the item at index 1)
print n
# prints [1, 5]
n.remove(item) will remove the actual item if it finds it:

n.remove(1)
# Removes 1 from the list,
# NOT the item at index 1
print n
# prints [3, 5]
del(n[1]) is like .pop in that it will remove the item at the given index, but it won't return it:

del(n[1])
# Doesn't return anything
print n
# prints [1, 5]

7:
n = "Hello"
# Your function here!
def string_function(s):
  return s+"world"


print string_function(n)

10:
def list_function(x):
  x[1] = x[1] + 3
  return x

n = [3, 5, 7]
print list_function(n)

11:
n = [3, 5, 7]
# Add your function here
def list_extender(lst):
  lst.append(9)
  return lst


print list_extender(n)

12:
n = [3, 5, 7]

def print_list(x):
  for i in range(0, len(x)):
    print x[i]
    
print print_list(n)

15:
n = [3, 5, 7]

def total(numbers):
  result = 0
  for i in range(0,len(numbers)):
    result += numbers[i]
  return result

16:
n = ["Michael", "Lieberman"]
# Add your function here
def join_strings(words):
  result = ""
  for i in range(0,len(words)):
    result += words[i]
  return result  


print join_strings(n)

17:
m = [1, 2, 3]
n = [4, 5, 6]

# Add your code here!
def join_lists(x,y):
  return x + y




print join_lists(m, n)
# You want this to print [1, 2, 3, 4, 5, 6]

18:
falsch:
n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here
def flatten(lists):
  results = []
  for numbers in lists:
    for x in numbers:
      results.append() = numbers[x] 
  return results

print flatten(n)

korrekt:
n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here
def flatten(lists):
  results = []
  for numbers in lists:
    for x in numbers:
      results.append(x)
  return results

print flatten(n)

vs vorschlag:
n = [[1, 2, 3], [4, 5, 6, 7, 8, 9]]
# Add your function here

def flatten(lists):
  results = []
  for numbers in lists:
    for number in numbers:
      results.append(number)
  return results

print flatten(n)

battleship:
board = []
for i in range(0,5):
  row =["O"] * 5
  board.append(row)

def print_board(board_in):
  for i in row:
    print " ".join(row)

print_board(board)

def random_row(board_in):
  return randint(0,len(board_in) -1)
  
def random_col(board_in):
  return randint(0,len(board_in) -1)

print ship_row
print ship_col

# Everything from here on should be in your for loop
# don't forget to properly indent!
for turn in range(4):
  print "Turn", turn + 1

guess_row = int(raw_input("Guess Row: "))
guess_col = int(raw_input("Guess Col: "))

if guess_row == ship_row and guess_col == ship_col:
  print "Congratulations! You sank my battleship!" 
  break 
else:
else:
  if guess_row not in range(5) or \
    guess_col not in range(5):
    print "Oops, that's not even in the ocean."
  elif (board[guess_row][guess_col] == "X"):
    print "You guessed that one already."
  else:
    print "You missed my battleship!"
    board[guess_row][guess_col] = "X"
  if turn == 3:
    print "Game Over"
  print_board(board)



Make multiple battleships: you'll need to be careful because you need to make sure that you don’t place battleships on top of each other on the game board. You'll also want to make sure that you balance the size of the board with the number of ships so the game is still challenging and fun to play.
Make battleships of different sizes: this is trickier than it sounds. All the parts of the battleship need to be vertically or horizontally touching and you’ll need to make sure you don’t accidentally place part of a ship off the side of the board.
Make your game a two-player game.
Use functions to allow your game to have more features like rematches, statistics and more!
Some of these options will be easier after we cover loops in the next lesson. Think about coming back to Battleship! after a few more lessons and see what other changes you can make!